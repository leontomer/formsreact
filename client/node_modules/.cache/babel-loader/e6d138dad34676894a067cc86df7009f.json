{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leont\\\\formsreact\\\\src\\\\FormSubmit.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Container from \"@material-ui/core/Container\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nexport default function FormSubmit(props) {\n  const [inputName, setInputName] = useState(\"\");\n  const [fields, setFields] = useState([]);\n  const [formName, setFormName] = useState(\"\");\n  const [inputVal, setInputVal] = useState({}); //console.log(props.match.params.FormId);\n\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/forms/getFormName\", {\n      params: {\n        id: props.match.params.FormId\n      }\n    }).then(res => {\n      //console.log(res.data.fields);\n      setFormName(res.data.formName); //setType(res.data.inputType);\n    }); //console.log(forms);\n    //console.log(forms);\n  }, []);\n  useEffect(() => {\n    console.log(inputVal);\n  }, [inputVal]);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/forms/getFormFields\", {\n      params: {\n        id: props.match.params.FormId\n      }\n    }).then(res => {\n      console.log(res);\n      setFields(res.data);\n\n      for (let i = 0; i < fields.length; i++) {\n        inputVal[fields[i]._id] = \"\";\n      } //setType(res.data.inputType);\n\n    }); //console.log(forms);\n    //console.log(forms);\n  }, []);\n\n  const Alert = () => {\n    return /*#__PURE__*/React.createElement(Alert, {\n      severity: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \"This is a success alert \\u2014 check it out!\");\n  };\n\n  const handleSubmit = () => {\n    axios.post(\"http://localhost:5000/forms/addFormInput\", {\n      inputName: inputName,\n      inputVal: inputVal,\n      id: props.match.params.FormId\n    }).then(res => console.log(res)); // Alert();\n\n    alert(\"Added\"); //console.log(inputVal);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fixed: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, formName, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), fields.map(field => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"flabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \" \", field.inputType, \": \"), \"\\\\\", field.inputType == \"email\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: field.inputName,\n    id: \"email\",\n    value: inputVal[field._id],\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }) : null, field.inputType == \"tel\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"tel\",\n    name: field.inputName,\n    id: \"tel\",\n    value: inputVal[field._id],\n    pattern: \"[0-9]{3}[0-9]{7}\",\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }) : null, field.inputType == \"number\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"quantity\",\n    name: field.inputName,\n    value: inputVal[field._id],\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }) : null, field.inputType == \"date\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    id: \"date\",\n    name: field.inputName,\n    value: inputVal[field._id],\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }) : null, field.inputType == \"text\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"text\",\n    name: field.inputName,\n    value: inputVal[field._id],\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }) : null, field.inputType == \"color\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"color\",\n    id: \"color\",\n    name: field.inputName,\n    value: inputVal[field._id],\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"input\", {\n    type: field.inputType,\n    name: field.inputName,\n    value: inputVal[field._id],\n    onChange: name => inputVal[field._id] = name.target.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"small\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 22\n      }\n    }),\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n}","map":{"version":3,"sources":["C:/Users/leont/formsreact/src/FormSubmit.js"],"names":["React","useEffect","useState","axios","Container","SaveIcon","Button","Alert","FormSubmit","props","inputName","setInputName","fields","setFields","formName","setFormName","inputVal","setInputVal","get","params","id","match","FormId","then","res","data","console","log","i","length","_id","handleSubmit","post","alert","map","field","inputType","name","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nexport default function FormSubmit(props) {\r\n  const [inputName, setInputName] = useState(\"\");\r\n  const [fields, setFields] = useState([]);\r\n  const [formName, setFormName] = useState(\"\");\r\n  const [inputVal, setInputVal] = useState({});\r\n\r\n  //console.log(props.match.params.FormId);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:5000/forms/getFormName\", {\r\n        params: {\r\n          id: props.match.params.FormId,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        //console.log(res.data.fields);\r\n        setFormName(res.data.formName);\r\n\r\n        //setType(res.data.inputType);\r\n      });\r\n    //console.log(forms);\r\n\r\n    //console.log(forms);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(inputVal);\r\n  }, [inputVal]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:5000/forms/getFormFields\", {\r\n        params: {\r\n          id: props.match.params.FormId,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setFields(res.data);\r\n        for (let i = 0; i < fields.length; i++) {\r\n          inputVal[fields[i]._id] = \"\";\r\n        }\r\n\r\n        //setType(res.data.inputType);\r\n      });\r\n    //console.log(forms);\r\n\r\n    //console.log(forms);\r\n  }, []);\r\n\r\n  const Alert = () => {\r\n    return (\r\n      <Alert severity=\"success\">This is a success alert — check it out!</Alert>\r\n    );\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    axios\r\n      .post(\"http://localhost:5000/forms/addFormInput\", {\r\n        inputName: inputName,\r\n        inputVal: inputVal,\r\n        id: props.match.params.FormId,\r\n      })\r\n\r\n      .then((res) => console.log(res));\r\n    // Alert();\r\n    alert(\"Added\");\r\n    //console.log(inputVal);\r\n  };\r\n  return (\r\n    <Container fixed>\r\n      <div>\r\n        {formName}\r\n        <br></br>\r\n        {fields.map((field) => (\r\n          <div>\r\n            <label htmlFor=\"flabel\"> {field.inputType}: </label>\\\r\n            {field.inputType == \"email\" ? (\r\n              <input\r\n                type=\"email\"\r\n                name={field.inputName}\r\n                id=\"email\"\r\n                value={inputVal[field._id]}\r\n                onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n              ></input>\r\n            ) : null}\r\n            {field.inputType == \"tel\" ? (\r\n              <input\r\n                type=\"tel\"\r\n                name={field.inputName}\r\n                id=\"tel\"\r\n                value={inputVal[field._id]}\r\n                pattern=\"[0-9]{3}[0-9]{7}\"\r\n                onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n              ></input>\r\n            ) : null}\r\n            {field.inputType == \"number\" ? (\r\n              <input\r\n                type=\"number\"\r\n                id=\"quantity\"\r\n                name={field.inputName}\r\n                value={inputVal[field._id]}\r\n                onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n              ></input>\r\n            ) : null}\r\n            {field.inputType == \"date\" ? (\r\n              <input\r\n                type=\"date\"\r\n                id=\"date\"\r\n                name={field.inputName}\r\n                value={inputVal[field._id]}\r\n                onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n              ></input>\r\n            ) : null}\r\n            {field.inputType == \"text\" ? (\r\n              <input\r\n                type=\"text\"\r\n                id=\"text\"\r\n                name={field.inputName}\r\n                value={inputVal[field._id]}\r\n                onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n              ></input>\r\n            ) : null}\r\n            {field.inputType == \"color\" ? (\r\n              <input\r\n                type=\"color\"\r\n                id=\"color\"\r\n                name={field.inputName}\r\n                value={inputVal[field._id]}\r\n                onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n              ></input>\r\n            ) : null}\r\n            <input\r\n              type={field.inputType}\r\n              name={field.inputName}\r\n              value={inputVal[field._id]}\r\n              onChange={(name) => (inputVal[field._id] = name.target.value)}\r\n            ></input>\r\n            <br></br>\r\n          </div>\r\n        ))}\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          startIcon={<SaveIcon />}\r\n          onClick={handleSubmit}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}